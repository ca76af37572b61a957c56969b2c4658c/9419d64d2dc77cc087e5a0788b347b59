---
# LAB 5 Task 2: Install Bind9 on vm2

- name: Install 'bind9'
  apt:
    name: bind9

# LAB 14
- name: Install 'python3-dnspython'
  apt:
    name: python3-dnspython


## Task 5: Configure master zone
- name: Upload db.pho.j2 to /var/cache/bind/db.pho.ng / DNS zone file
  when: inventory_hostname in groups['dns_masters']
  template: 
    src: db.pho.j2
    dest: /var/cache/bind/db.{{ domain }}
    force: no
  #no_log: true
  notify:
    - rndc reload # hotfix


# LAB 14
- name: Upload db.domain.reverse.j2 to /var/cache/bind/db.pho.ng.reverse / reverse DNS zone file
  when: inventory_hostname in groups['dns_masters']
  template: 
    src: db.domain.reverse.j2
    dest: /var/cache/bind/db.{{ domain }}.reverse
    force: no
  #no_log: true    
  notify:
    - rndc reload # hotfix


## Task 3: Configure DNS forwarders
## Task 4: Configure access rules for DNS server

- name: Upload named.conf.local.j2 to /etc/bind/named.conf.local / local DNS server configuration
  template: 
    src: named.conf.local.j2
    dest: /etc/bind/named.conf.local
  #no_log: true
  notify: 
    - Restart bind9

- name: Upload named.conf.options.j2 to /etc/bind/named.conf.options / configuration options for the DNS server
  template: 
    src: named.conf.options.j2
    dest: /etc/bind/named.conf.options
  no_log: true
  notify: 
    - Restart bind9


#- name: Get IP
#  debug:
#    msg: 
#      - bematv-1 IP is {{ hostvars['bematv-1']['ansible_default_ipv4']['address'] }}
#      - bematv-2 IP is {{ hostvars['bematv-2']['ansible_default_ipv4']['address'] }}


## Task 6: Update your VMs DNS settings

#- name: Update resolv.conf  ##I have created the resolver play for this
#  template: 
#    src: resolv.conf.j2
#    dest: /etc/resolv.conf
#  notify: 
#    - rndc reload
#    - Restart bind9


- name: Ensure bind9 is started
  service:
    name: bind9
    state: started


# LAB 14
- name: Set A records
  when: inventory_hostname in groups["dns_masters"]
  nsupdate:
    key_algorithm: "hmac-sha256"
    key_name: "dns_update_key"
    key_secret: "{{ dns_update_key }}"
    server: "localhost"
    zone: "{{ domain }}"
    record: "{{ item.key }}"
    type: "A"
    value: "{{ item.value }}"
  loop: "{{ dns_a_records | dict2items }}"
  #run_once: True
  
- name: Set CNAME records
  when: inventory_hostname in groups["dns_masters"]
  nsupdate:
    key_algorithm: "hmac-sha256"
    key_name: "dns_update_key"
    key_secret: "{{ dns_update_key }}"
    server: "localhost"
    zone: "{{ domain }}"
    record: "{{ item.key }}"
    type: "CNAME"
    value: "{{ item.value }}"
  loop: "{{ dns_cname_records | dict2items }}"
  #run_once: True
